name: projeto automatizado completo etapa 3 cicd deploy aplicacao

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve

  #     - name: Terraform Apply
  #       run: terraform apply -auto-approve

  # build-and-push-docker:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Login to Amazon ECR
  #       run: |
  #         aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 423831492861.dkr.ecr.us-east-1.amazonaws.com

  #     - name: Build, tag, and push image to Amazon ECR
  #       run: |
  #         docker build -t teddy-application-repository:$GITHUB_SHA .
  #         docker tag teddy-application-repository:$GITHUB_SHA 423831492861.dkr.ecr.us-east-1.amazonaws.com/teddy-application-repository:$GITHUB_SHA
  #         docker push 423831492861.dkr.ecr.us-east-1.amazonaws.com/teddy-application-repository:$GITHUB_SHA

  #     - name: Clean up old images from Amazon ECR
  #       run: |
  #         repository="teddy-application-repository"
  #         keep_last=1
  #         images=$(aws ecr describe-images --repository-name $repository --query 'sort_by(imageDetails,& imagePushedAt)[].imageDigest' --output text)
  #         images_to_delete=$(echo $images | tr ' ' '\n' | tail -n +$(($keep_last+1)))
  #         for digest in $images_to_delete; do
  #           aws ecr batch-delete-image --repository-name $repository --image-ids imageDigest=$digest
  #           echo "Deleted image with digest $digest"
  #         done

  # update-ecs-service:
  #   needs: build-and-push-docker
  #   name: Update ECS Service
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Update ECS Service
  #       run: |
  #         aws ecs update-service --cluster ecs-cluster-mvp --service my-application-service --force-new-deployment
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}